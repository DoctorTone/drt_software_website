/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { MATERIALS } from "../state/Config.js";

export function Physics({ fade, ...props }) {
	const atomMatRef = useRef();
	const torusRefs = [useRef(), useRef(), useRef()];

	const { nodes, materials } = useGLTF("./models/physics.glb");

	useFrame((state, delta) => {
		if (fade) {
			atomMatRef.current.opacity -= delta;
			for (let i = 0; i < torusRefs.length; ++i) {
				torusRefs[i].current.opacity -= delta;
			}
			if (atomMatRef.current.opacity < 0) {
				atomMatRef.current.opacity = 1;
				for (let i = 0; i < torusRefs.length; ++i) {
					torusRefs[i].current.opacity = 1;
				}
			}
		}
	});

	return (
		<group {...props} dispose={null}>
			<mesh
				geometry={nodes.Cube.geometry}
				position={[0, 0, 0]}
				rotation={[0, 1.57, 0]}
				scale={0.5}
			>
				<meshLambertMaterial
					transparent={true}
					color={0xcc7306}
					ref={atomMatRef}
				/>
			</mesh>
			<mesh
				geometry={nodes.Torus001.geometry}
				position={[0.34, -0.08, 0.02]}
				rotation={[-0.16, 0, -Math.PI / 2]}
				scale={[3.75, 1.47, 3]}
			>
				<meshLambertMaterial
					transparent={true}
					color={0x777777}
					ref={torusRefs[0]}
				/>
			</mesh>
			<mesh
				geometry={nodes.Torus001.geometry}
				position={[-0.52, -0.1, 0.16]}
				rotation={[-1.18, 0, -Math.PI / 2]}
				scale={[3.75, 1.47, 3]}
			>
				<meshLambertMaterial
					transparent={true}
					color={0x777777}
					ref={torusRefs[1]}
				/>
			</mesh>
			<mesh
				geometry={nodes.Torus001.geometry}
				position={[-0.04, -0.11, 0]}
				rotation={[0.89, 0, -Math.PI / 2]}
				scale={[3.75, 1.47, 3]}
			>
				<meshLambertMaterial
					transparent={true}
					color={0x777777}
					ref={torusRefs[2]}
				/>
			</mesh>
		</group>
	);
}

useGLTF.preload("./models/physics.glb");
