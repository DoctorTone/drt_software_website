/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SCENE } from "../state/Config";

export function Work({ fadeIn, fadeOut, ...props }) {
  const { nodes, materials } = useGLTF("./models/work2.glb");
  const matRefs = { screwdriver: useRef(), wrench: useRef() };

  let fadeOutEnabled = fadeOut;
  let fadeInEnabled = fadeIn;

  useFrame((state, delta) => {
    if (fadeOutEnabled) {
      matRefs.screwdriver.current.opacity -= delta * SCENE.FADE_DELAY;
      matRefs.wrench.current.opacity -= delta;
      if (matRefs.screwdriver.current.opacity < 0) {
        matRefs.screwdriver.current.opacity = 0;
        matRefs.wrench.current.opacity = 0;
        fadeOutEnabled = false;
      }
    }
    if (fadeInEnabled) {
      matRefs.screwdriver.current.opacity += delta * SCENE.FADE_DELAY;
      matRefs.wrench.current.opacity += delta;
      if (matRefs.screwdriver.current.opacity >= 1) {
        matRefs.screwdriver.current.opacity = 1;
        matRefs.wrench.current.opacity = 1;
        fadeInEnabled = false;
      }
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.screwdriver.geometry} position={[0.76, 1.9, -0.76]}>
        <meshLambertMaterial
          transparent={true}
          color={0x777777}
          opacity={0}
          ref={matRefs.screwdriver}
        />
      </mesh>
      <mesh
        geometry={nodes.wrench.geometry}
        position={[-0.6, 0, -1.07]}
        scale={0.54}
      >
        <meshLambertMaterial
          transparent={true}
          opacity={0}
          color={0x777777}
          ref={matRefs.wrench}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/work2.glb");
