/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SCENE } from "../state/Config";

export function Physics({ fadeIn, fadeOut, ...props }) {
  const { nodes } = useGLTF("./models/physics.glb");
  const atomRef = useRef();
  const torusRefs = [useRef(), useRef(), useRef()];

  let fadeOutEnabled = fadeOut;
  let fadeInEnabled = fadeIn;

  useFrame((state, delta) => {
    if (fadeOutEnabled) {
      atomRef.current.opacity -= delta * SCENE.FADE_DELAY;
      for (let i = 0; i < torusRefs.length; ++i) {
        torusRefs[i].current.opacity -= delta * SCENE.FADE_DELAY;
      }
      if (atomRef.current.opacity < 0) {
        atomRef.current.opacity = 0;
        for (let i = 0; i < torusRefs.length; ++i) {
          torusRefs[i].current.opacity = 0;
        }
        fadeOutEnabled = false;
      }
    }
    if (fadeInEnabled) {
      if (atomRef.current.opacity >= 1) {
        atomRef.current.opacity = 0;
        for (let i = 0; i < torusRefs.length; ++i) {
          torusRefs[i].current.opacity = 0;
        }
      }
      atomRef.current.opacity += delta * SCENE.FADE_DELAY;
      for (let i = 0; i < torusRefs.length; ++i) {
        torusRefs[i].current.opacity += delta * SCENE.FADE_DELAY;
      }
      if (atomRef.current.opacity >= 1) {
        atomRef.current.opacity = 1;
        for (let i = 0; i < torusRefs.length; ++i) {
          torusRefs[i].current.opacity = 1;
        }
        fadeInEnabled = false;
      }
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube.geometry}
        position={[0, 0, 0]}
        rotation={[0, 1.57, 0]}
        scale={0.5}
      >
        <meshLambertMaterial
          transparent={true}
          color={0xcc7306}
          ref={atomRef}
        />
      </mesh>
      <mesh
        geometry={nodes.Torus001.geometry}
        position={[0.34, -0.08, 0.02]}
        rotation={[-0.16, 0, -Math.PI / 2]}
        scale={[3.75, 1.47, 3]}
      >
        <meshLambertMaterial
          transparent={true}
          color={0x777777}
          ref={torusRefs[0]}
        />
      </mesh>
      <mesh
        geometry={nodes.Torus001.geometry}
        position={[-0.52, -0.1, 0.16]}
        rotation={[-1.18, 0, -Math.PI / 2]}
        scale={[3.75, 1.47, 3]}
      >
        <meshLambertMaterial
          transparent={true}
          color={0x777777}
          ref={torusRefs[1]}
        />
      </mesh>
      <mesh
        geometry={nodes.Torus001.geometry}
        position={[-0.04, -0.11, 0]}
        rotation={[0.89, 0, -Math.PI / 2]}
        scale={[3.75, 1.47, 3]}
      >
        <meshLambertMaterial
          transparent={true}
          color={0x777777}
          ref={torusRefs[2]}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/physics.glb");
