/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";
import { SCENE } from "../state/Config";

export function Phone({ fadeIn, fadeOut, ...props }) {
  const { nodes } = useGLTF("./models/phone.glb");
  const matRef = useRef();
  let fadeOutEnabled = fadeOut;
  let fadeInEnabled = fadeIn;

  useFrame((state, delta) => {
    if (fadeOutEnabled) {
      matRef.current.opacity -= delta * SCENE.FADE_DELAY;
      if (matRef.current.opacity < 0) {
        matRef.current.opacity = 0;
        fadeOutEnabled = false;
      }
    }
    if (fadeInEnabled) {
      if (matRef.current.opacity >= 1) {
        matRef.current.opacity = 0;
      }
      matRef.current.opacity += delta * SCENE.FADE_DELAY;
      if (matRef.current.opacity >= 1) {
        matRef.current.opacity = 1;
        fadeInEnabled = false;
      }
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Phone.geometry}>
        <meshLambertMaterial
          transparent={true}
          opacity={0}
          color={0x777777}
          ref={matRef}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("./models/phone.glb");
