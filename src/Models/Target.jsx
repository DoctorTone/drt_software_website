/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { SCENE } from "../state/Config";

export function Target({ fadeIn, fadeOut, ...props }) {
  const group = useRef();
  const { nodes, materials } = useGLTF("./models/target.gltf");
  for (const mat in materials) {
    materials[mat].transparent = true;
  }
  const matRefs = {
    targetRed: useRef(),
    targetWhite: useRef(),
    stand: useRef(),
  };
  let fadeOutEnabled = fadeOut;
  let fadeInEnabled = fadeIn;

  useFrame((state, delta) => {
    if (fadeOutEnabled) {
      for (const part in matRefs) {
        matRefs[part].current.material.opacity -= delta * SCENE.FADE_DELAY;
      }
      if (matRefs.targetRed.current.material.opacity < 0) {
        for (const part in matRefs) {
          matRefs[part].current.material.opacity = 0;
        }
        fadeOutEnabled = false;
      }
    }
    if (fadeInEnabled) {
      if (matRefs.targetRed.current.material.opacity >= 1) {
        for (const part in matRefs) {
          matRefs[part].current.material.opacity = 0;
        }
      }
      for (const part in matRefs) {
        matRefs[part].current.material.opacity += delta * SCENE.FADE_DELAY;
      }
      if (matRefs.targetRed.current.material.opacity >= 1) {
        for (const part in matRefs) {
          matRefs[part].current.material.opacity = 1;
        }
        fadeInEnabled = false;
      }
    }
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          geometry={nodes.Cylinder016.geometry}
          material={materials["Red.025"]}
          ref={matRefs.targetRed}
        />
        <mesh
          geometry={nodes.Cylinder016_1.geometry}
          material={materials["White.025"]}
          ref={matRefs.targetWhite}
        />
        <mesh
          geometry={nodes.Cylinder016_2.geometry}
          material={materials["BrownDark.018"]}
          ref={matRefs.stand}
        />
      </group>
    </group>
  );
}

useGLTF.preload("./models/target.gltf");
